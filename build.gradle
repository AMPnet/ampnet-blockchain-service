buildscript {
	ext {
		kotlinVersion = '1.3.20'
		springBootVersion = '2.1.2.RELEASE'
		junitVersion = '5.3.2'
		grpcVersion = '1.18.0'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
		classpath('com.google.protobuf:protobuf-gradle-plugin:0.8.7')
		classpath('org.asciidoctor:asciidoctor-gradle-plugin:1.5.7')
	}
}

plugins {
	id 'com.google.cloud.tools.jib' version '1.0.0'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.asciidoctor.convert'

group = 'com.ampnet.crowdfunding'
version = '0.0.3'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
	jcenter()
}

configurations {
	ktlint
}

test {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.2"
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-configuration-processor')
	
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
	implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
	implementation('org.flywaydb:flyway-core')
	implementation('org.postgresql:postgresql')
	implementation('org.web3j:core:4.0.4')
	implementation('com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8')
	implementation('io.github.microutils:kotlin-logging:1.6.23')

	implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
	implementation "io.grpc:grpc-protobuf:${grpcVersion}"
	implementation "io.grpc:grpc-stub:${grpcVersion}"
	implementation 'io.github.lognet:grpc-spring-boot-starter:3.0.0'
	implementation 'io.github.novacrypto:Base58:2019.01.27@jar'

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
	testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
	testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")
	testImplementation("io.grpc:grpc-testing:${grpcVersion}")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")

	ktlint "com.github.shyiko:ktlint:0.29.0"
}

protobuf {
	protoc { artifact = 'com.google.protobuf:protoc:3.5.1-1' }
	plugins {
		grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
	}
	generateProtoTasks {
		all()*.plugins { grpc {} }
	}
}

jib.container.useCurrentTimestamp = true
jib.to.image = "ampnet/crowdfunding-blockchain:${version}"
jib.to.auth.username = "${System.env.DOCKER_USERNAME}"
jib.to.auth.password = "${System.env.DOCKER_PASSWORD}"
jib.to.tags = ["latest"]

task ktlint(type: JavaExec, group: "verification") {
	description = "Check Kotlin code style."
	main = "com.github.shyiko.ktlint.Main"
	classpath = configurations.ktlint
	args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
	description = "Fix Kotlin code style deviations."
	main = "com.github.shyiko.ktlint.Main"
	classpath = configurations.ktlint
	args "-F", "src/**/*.kt"
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/reports/jacoco/html")
	}
	sourceDirectories = files(["${project.projectDir}/src/main/kotlin"])
	classDirectories = fileTree(dir: "${buildDir}/classes/kotlin/main", excludes: ['**/model/**'])
}

asciidoctor {
    dependsOn test
    attributes 'snippets': file('build/generated-snippets')
}
task copyDocs(type: Copy) {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") into 'src/main/resources/static/docs'
}
